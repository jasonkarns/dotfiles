#!/bin/sh


# todo: use /remotes/clearcase

function main {
  case $1 in
  init)
    init
  ;;
  clone)
    clone
  ;;
  fetch)
    fetch
  ;;
  pull)
    pull
  ;;
  commit)
    commit
  ;;
  *)
    echo "help"
  ;;
  esac
}

function init {
  git init
  git config core.autocrlf input
  mkdir .git/cc
}

function clone {
  #todo support --origin/-o flag for setting remote name

  BRANCH=$1
  VIEW=`cleartool pwv -short | sed -e 's/karnsj1_//'`
  REMOTE=`echo $VIEW | tr '[A-Z]' '[a-z]'`

  init

  git add .
  git commit -m "CLEARCASE INIT"
  git br clearcase

  echo "Configuring origin's remote and branch"
  pushd /c/dev/navigators/ppa_test_scripts
  git remote add -f $REMOTE /r/$VIEW/ppa_test_scripts
  git br $BRANCH $REMOTE/master
  

  echo "Configuring origin"
  popd
  git remote add -f origin /c/dev/navigators/ppa_test_scripts
  git config branch.master.remote origin
  git br --set-upstream master origin/$BRANCH

  echo "Set up the grafts now"
}

function fetch {
  # repo root
  repo_root=`git rev-parse --show-toplevel`

  echo "Fetching updates from ClearCase:"
  cleartool update -overwrite -log $repo_root/.git/cc/cc.log $repo_root

  # format the clearcase log file for git
  sed -e "s/^#/=/" -e "1 i CLEARCASE UPDATE" <$repo_root/.git/cc/cc.log>$repo_root/.git/cc/cc.msg
}

function pull {
  # repo root
  repo_root=`git rev-parse --show-toplevel`

  # guard against uncommitted changes
  if [ "`git status --porcelain`" != "" ]; then
    echo "Cannot rebase with uncommitted changes:"
    git status
    exit 1
  fi

  # checkout the clearcase branch from git
  git checkout clearcase
  echo "Cleaning up files left by checkout:"
  git clean -df -- $repo_root

  # update from clearcase
  fetch
  
  git add -A -- $repo_root
  git commit --file=$repo_root/.git/cc/cc.msg

  if [ $? -eq 0 ]; then
    if [ "`git branch --no-color --no-merged master`" == "* clearcase" ]; then
      echo "Fast-forwarding master:"
      git update-ref refs/heads/master clearcase
    else
      echo "Rebasing master:"
      
      git rebase clearcase

      echo "Fixing write permissions for ClearCase:"
      cleartool setactivity dev_sync 
      cleartool ls -recurse | grep "hijacked" | sed -e 's/\\/\//g' -e 's/\s\[.*//g' | while read elem; do cleartool checkout -unreserved -ncomment -usehijack "$elem"; done 
      cleartool setactivity -none

      echo "Undoing checkouts of unchanged files:"
      cleartool lscheckout -cview -me -short -recurse | sed 's/\\/\//g' | cc_uncheckout_unchanged

      echo "Normalizing newlines:"
      git add . && git reset

    fi
  fi
  
  git checkout master
  exit
}

function commit {
  echo "Not ready yet"
  # check for potential clearcase update

  #Find Modifed Files and Check them all out
  cleartool ls -recurse | grep "hijacked" | sed 's/\\/\//g'

  exit

  git cclog clearcase..
  #add any new files: (cleartool ls -view_only -short -recurse | egrep -v "\.git|CHECKEDOUT")
  #remove any deleted files
  git update-ref refs/heads/clearcase master
  #pristine
  #pull from view
}


main $@